datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DIRECT_URL")
    extensions = [pg_trgm]
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

// Some conventions:
// - `name` is a "display name" which user sees
// - `uri` is unique identifier of format `lower-case-kebab-case` for user-friendly search and to use as url path

/// Information for app, e.g. Inventory app
model App {
    id Int @id @default(autoincrement())

    uri  String @unique @db.VarChar(255)
    name String @db.VarChar(255)

    config Json @default("{}")

    userApps UserApps[]

    @@map("apps")
}

model UserApps {
    id Int @id @default(autoincrement())

    user   User   @relation(fields: [userId], references: [id])
    userId BigInt @map("user_id")

    app   App @relation(fields: [appId], references: [id])
    appId Int @map("app_id")

    config Json @default("{}")

    @@map("user_apps")
}

model User {
    id BigInt @id @default(autoincrement())

    email    String  @unique @db.VarChar(320)
    uri      String  @unique @db.VarChar(255)
    password String  @db.VarChar(255)
    online   Boolean @default(false) @db.Boolean

    avatar        Image?  @relation(fields: [avatarImageId], references: [id])
    avatarImageId BigInt? @map("avatar_image_id")

    createdAt DateTime @default(now()) @map("created_at")

    currency   Currency @relation(fields: [currencyId], references: [id])
    currencyId Int      @default(840) @map("currency_id") @db.SmallInt

    // Common info //
    apps       UserApps[]
    operations UserOperations[]
    images     Image[]          @relation("UserImages")

    // Inventory App //
    inventories      Inventory[]
    items            Item[]
    amountUnits      AmountUnit[]
    attributes       Attribute[]
    buyLists         BuyList[]
    buyListItems     BuyListItem[]
    inventoriesStars InventoryStar[]

    @@map("users")
}

model UserOperations {
    id BigInt @id @default(autoincrement())

    user   User   @relation(fields: [userId], references: [id])
    userId BigInt @map("user_id")

    operation String

    createdAt DateTime @default(now()) @map("created_at")

    @@map("user_operations")
}

// ISO Stuff //

// $USD ISO code is 840
model Currency {
    // Id is ISO code
    id Int @id @db.SmallInt

    name     String @db.VarChar(127)
    code     String @db.VarChar(3)
    symbol   String @db.VarChar(10)
    decimals Int    @db.SmallInt

    users       User[]
    inventories Inventory[]
    items       Item[]

    @@map("currencies")
}

// Inventory //
model Inventory {
    id Int @id @default(autoincrement())
    // realId String @unique

    uri String @db.VarChar(255)

    user   User   @relation(fields: [userId], references: [id])
    userId BigInt @map("user_id")

    name        String  @db.VarChar(255)
    description String? @db.VarChar(1023)

    avatar        Image?  @relation(fields: [avatarImageId], references: [id])
    avatarImageId BigInt? @map("avatar_image_id")

    currency   Currency? @relation(fields: [currencyId], references: [id])
    currencyId Int?      @map("currency_id") @db.SmallInt

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    items   Item[]
    folders Folder[]
    stars   InventoryStar[]

    @@unique([userId, uri])
    @@map("inventories")
}

model InventoryStar {
    user        User      @relation(fields: [userId], references: [id])
    userId      BigInt    @map("user_id")
    inventory   Inventory @relation(fields: [inventoryId], references: [id])
    inventoryId Int       @map("inventory_id")

    createdAt DateTime @default(now()) @map("created_at")

    @@id([userId, inventoryId])
    @@map("inventories_stars")
}

model AmountUnit {
    id     Int    @id @default(autoincrement())
    name   String @db.VarChar(255)
    symbol String @db.VarChar(10)

    user   User?   @relation(fields: [userId], references: [id])
    userId BigInt? @map("user_id")

    default Boolean? @unique

    items         Item[]
    powerPrefixes AmountUnitPowerPrefix[]

    @@unique([symbol, userId])
    @@map("amount_units")
}

model AmountUnitPowerPrefix {
    amountUnit   AmountUnit @relation(fields: [amountUnitId], references: [id])
    amountUnitId Int        @map("amount_unit_id")

    power  Int     @db.SmallInt
    prefix String
    name   String?

    @@id([amountUnitId, power])
    @@map("amount_unit_power_prefixes")
}

model Image {
    id  BigInt @id @default(autoincrement())
    src String

    user   User   @relation("UserImages", fields: [userId], references: [id])
    userId BigInt @map("user_id")

    items              ItemImage[]
    folders            FolderImages[]
    inventoriesAvatars Inventory[]
    usersAvatars       User[]
    itemVariants       ItemVariant[]

    @@map("images")
}

model Tag {
    id          BigInt   @id @default(autoincrement())
    // realId      String   @unique
    name        String   @db.VarChar(255)
    description String?  @db.VarChar(1023)
    forms       String[] @unique @default([])

    @@map("tags")
}

enum AttributeType {
    String
    Enum
}

model Attribute {
    id BigInt @id @default(autoincrement())

    name        String
    description String?
    type        AttributeType

    allowedValues String[] @default([]) @map("allowed_values")

    user   User   @relation(fields: [userId], references: [id])
    userId BigInt @map("user_id")

    items ItemAttr[]

    @@map("attributes")
}

model Item {
    id BigInt @id @default(autoincrement())
    // realId String @unique @db.VarChar(255)

    uri String @db.VarChar(255)

    name        String  @db.VarChar(255)
    description String? @db.VarChar(1023)

    inventory   Inventory @relation(fields: [inventoryId], references: [id])
    inventoryId Int       @map("inventory_id")

    folder   Folder @relation(fields: [folderId], references: [id])
    folderId BigInt @map("folder_id")

    itemLocation      ItemLocation? @relation(fields: [itemLocationId], references: [id])
    itemLocationId    Int?          @map("item_location_id")
    itemLocationNotes String?       @map("item_location_ notes") @db.VarChar(1023)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    buyLink    String?  @map("buy_link") @db.VarChar(255)
    price      BigInt?
    currency   Currency @relation(fields: [currencyId], references: [id])
    currencyId Int      @default(840) @map("currency_id") @db.SmallInt

    amountUnit   AmountUnit @relation(fields: [amountUnitId], references: [id])
    amountUnitId Int        @map("amount_unit_id")
    amountValue  Float      @default(0.0) @map("amount_value") @db.DoublePrecision

    user   User   @relation(fields: [userId], references: [id])
    userId BigInt @map("user_id")

    variants   ItemVariant[]
    usages     ItemUsage[]
    returns    ItemReturn[]
    arrivals   ArrivalItems[]
    images     ItemImage[]
    attributes ItemAttr[]
    buyLists   BuyListItem[]

    @@unique([folderId, uri])
    @@map("items")
}

model ItemAttr {
    id BigInt @id @default(autoincrement())

    item   Item      @relation(fields: [itemId], references: [id])
    itemId BigInt    @map("item_id")
    attr   Attribute @relation(fields: [attrId], references: [id])
    attrId BigInt    @map("attr_id")

    value String

    variants ItemVariantAttr[]

    @@unique([itemId, attrId])
    @@map("item_attrs")
}

model ItemImage {
    item   Item   @relation(fields: [itemId], references: [id])
    itemId BigInt @map("item_id")

    image   Image  @relation(fields: [imageId], references: [id])
    imageId BigInt @map("image_id")

    createdAt DateTime @default(now()) @map("created_at")

    @@id([itemId, imageId])
    @@map("item_images")
}

model ItemVariant {
    id BigInt @id @default(autoincrement())

    uri String @db.VarChar(255)

    name        String  @db.VarChar(255)
    description String? @db.VarChar(1023)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    avatar        Image?  @relation(fields: [avatarImageId], references: [id])
    avatarImageId BigInt? @map("avatar_image_id")

    amountValue Float @default(0.0) @map("amount_value") @db.DoublePrecision

    item   Item   @relation(fields: [itemId], references: [id])
    itemId BigInt @map("item_id")

    price BigInt?

    attributes ItemVariantAttr[]
    buyLists   BuyListItem[]

    @@unique([itemId, uri])
    @@map("item_variants")
}

model ItemVariantAttr {
    variant       ItemVariant @relation(fields: [itemVariantId], references: [id])
    itemVariantId BigInt      @map("item_variant_id")
    itemAttr      ItemAttr    @relation(fields: [itemAttrId], references: [id], onDelete: Cascade)
    itemAttrId    BigInt      @map("item_attr_id")

    value String

    @@id([itemVariantId, itemAttrId])
    @@map("item_variant_attrs")
}

// model ItemVariantImage {
//     itemVariant   ItemVariant @relation(fields: [itemVariantId], references: [id])
//     itemVariantId BigInt

//     image   Image  @relation(fields: [imageId], references: [id])
//     imageId BigInt

//     @@id([itemVariantId, imageId])
//     @@map("item_variant_images")
// }

model ItemLocation {
    id          Int     @id @default(autoincrement())
    name        String  @db.VarChar(255)
    description String? @db.VarChar(1023)

    items Item[]

    @@map("item_locations")
}

model ItemUsage {
    id BigInt @id @default(autoincrement())

    item   Item   @relation(fields: [itemId], references: [id])
    itemId BigInt @map("item_id")

    notes  String @db.VarChar(1023)
    amount BigInt

    @@map("item_usages")
}

model ItemReturn {
    id BigInt @id @default(autoincrement())

    item   Item   @relation(fields: [itemId], references: [id])
    itemId BigInt @map("item_id")

    notes  String @db.VarChar(1023)
    amount BigInt

    @@map("item_returns")
}

// @map not working, idk why
enum FolderKind {
    Root
    Trash
}

model Folder {
    id BigInt @id @default(autoincrement())

    uri String @db.VarChar(255)

    inventory   Inventory @relation(fields: [inventoryId], references: [id])
    inventoryId Int       @map("inventory_id")

    name        String  @db.VarChar(255)
    description String? @db.VarChar(1023)

    kind     FolderKind?
    parent   Folder?     @relation("Parent", fields: [parentId], references: [id])
    parentId BigInt?

    children Folder[]       @relation("Parent")
    items    Item[]
    images   FolderImages[]

    @@unique([parentId, uri])
    @@unique([inventoryId, kind])
    @@map("folders")
}

model FolderImages {
    folder   Folder @relation(fields: [folderId], references: [id])
    folderId BigInt @map("folder_id")
    image    Image  @relation(fields: [imageId], references: [id])
    imageId  BigInt @map("image_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    @@id([folderId, imageId])
    @@map("folder_images")
}

model Arrival {
    id BigInt @id @default(autoincrement())

    name String @db.VarChar(255)

    createdAt DateTime @default(now()) @map("created_at")

    items ArrivalItems[]

    @@map("arrivals")
}

model ArrivalItems {
    arrival Arrival @relation(fields: [arrivalId], references: [id])
    item    Item    @relation(fields: [itemId], references: [id])

    arrivalId BigInt @map("arrival_id")
    itemId    BigInt @map("item_id")
    value     Int

    price BigInt

    @@id([arrivalId, itemId])
    @@map("arrival_items")
}

model BuyList {
    id BigInt @id @default(autoincrement())

    uri String

    name        String  @db.VarChar(255)
    description String? @db.VarChar(1023)

    user   User   @relation(fields: [userId], references: [id])
    userId BigInt @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    watch Boolean

    items BuyListItem[]

    @@unique([userId, uri])
    @@map("buy_lists")
}

model BuyListItem {
    id BigInt @id @default(autoincrement())

    name        String? @db.VarChar(255)
    description String? @db.VarChar(1023)

    user   User   @relation(fields: [userId], references: [id])
    userId BigInt @map("user_id")

    buyList   BuyList @relation(fields: [buyListId], references: [id])
    buyListId BigInt  @map("buy_list_id")

    item   Item?   @relation(fields: [itemId], references: [id])
    itemId BigInt? @map("item_id")

    itemVariant   ItemVariant? @relation(fields: [itemVariantId], references: [id])
    itemVariantId BigInt?      @map("item_variant_id")

    amountValue Float @map("amount_value")

    checked Boolean @default(false)

    // NULLS NOT DISTINCT unique index in sql file
    @@unique([buyListId, itemId, itemVariantId])
    @@map("buy_list_items")
}
